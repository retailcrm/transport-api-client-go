// Package transport_api_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package transport_api_client

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for WebhookMessageDeletedType.
const (
	WebhookMessageDeletedTypeMessageDeleted WebhookMessageDeletedType = "message_deleted"
)

// EnumValues returns all valid values for WebhookMessageDeletedType.
func (WebhookMessageDeletedType) EnumValues() []string {
	return []string{
		string(WebhookMessageDeletedTypeMessageDeleted),
	}
}

// Validate validates the value of WebhookMessageDeletedType.
func (v WebhookMessageDeletedType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookMessageDeletedType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookMessageDeletedType.
func (v *WebhookMessageDeletedType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookMessageDeletedType(s)
	return nil
}

// Defines values for WebhookMessageReactionAddType.
const (
	WebhookMessageReactionAddTypeReactionAdd WebhookMessageReactionAddType = "reaction_add"
)

// EnumValues returns all valid values for WebhookMessageReactionAddType.
func (WebhookMessageReactionAddType) EnumValues() []string {
	return []string{
		string(WebhookMessageReactionAddTypeReactionAdd),
	}
}

// Validate validates the value of WebhookMessageReactionAddType.
func (v WebhookMessageReactionAddType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookMessageReactionAddType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookMessageReactionAddType.
func (v *WebhookMessageReactionAddType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookMessageReactionAddType(s)
	return nil
}

// Defines values for WebhookMessageReactionDeleteType.
const (
	WebhookMessageReactionDeleteTypeReactionDelete WebhookMessageReactionDeleteType = "reaction_delete"
)

// EnumValues returns all valid values for WebhookMessageReactionDeleteType.
func (WebhookMessageReactionDeleteType) EnumValues() []string {
	return []string{
		string(WebhookMessageReactionDeleteTypeReactionDelete),
	}
}

// Validate validates the value of WebhookMessageReactionDeleteType.
func (v WebhookMessageReactionDeleteType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookMessageReactionDeleteType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookMessageReactionDeleteType.
func (v *WebhookMessageReactionDeleteType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookMessageReactionDeleteType(s)
	return nil
}

// Defines values for WebhookMessageReadType.
const (
	WebhookMessageReadTypeMessageRead WebhookMessageReadType = "message_read"
)

// EnumValues returns all valid values for WebhookMessageReadType.
func (WebhookMessageReadType) EnumValues() []string {
	return []string{
		string(WebhookMessageReadTypeMessageRead),
	}
}

// Validate validates the value of WebhookMessageReadType.
func (v WebhookMessageReadType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookMessageReadType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookMessageReadType.
func (v *WebhookMessageReadType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookMessageReadType(s)
	return nil
}

// Defines values for WebhookMessageSentType.
const (
	WebhookMessageSentTypeMessageSent WebhookMessageSentType = "message_sent"
)

// EnumValues returns all valid values for WebhookMessageSentType.
func (WebhookMessageSentType) EnumValues() []string {
	return []string{
		string(WebhookMessageSentTypeMessageSent),
	}
}

// Validate validates the value of WebhookMessageSentType.
func (v WebhookMessageSentType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookMessageSentType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookMessageSentType.
func (v *WebhookMessageSentType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookMessageSentType(s)
	return nil
}

// Defines values for WebhookMessageUpdatedType.
const (
	WebhookMessageUpdatedTypeMessageUpdated WebhookMessageUpdatedType = "message_updated"
)

// EnumValues returns all valid values for WebhookMessageUpdatedType.
func (WebhookMessageUpdatedType) EnumValues() []string {
	return []string{
		string(WebhookMessageUpdatedTypeMessageUpdated),
	}
}

// Validate validates the value of WebhookMessageUpdatedType.
func (v WebhookMessageUpdatedType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookMessageUpdatedType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookMessageUpdatedType.
func (v *WebhookMessageUpdatedType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookMessageUpdatedType(s)
	return nil
}

// Defines values for WebhookTemplateCreateType.
const (
	WebhookTemplateCreateTypeTemplateCreate WebhookTemplateCreateType = "template_create"
)

// EnumValues returns all valid values for WebhookTemplateCreateType.
func (WebhookTemplateCreateType) EnumValues() []string {
	return []string{
		string(WebhookTemplateCreateTypeTemplateCreate),
	}
}

// Validate validates the value of WebhookTemplateCreateType.
func (v WebhookTemplateCreateType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookTemplateCreateType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookTemplateCreateType.
func (v *WebhookTemplateCreateType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookTemplateCreateType(s)
	return nil
}

// Defines values for WebhookTemplateDeleteType.
const (
	WebhookTemplateDeleteTypeTemplateDelete WebhookTemplateDeleteType = "template_delete"
)

// EnumValues returns all valid values for WebhookTemplateDeleteType.
func (WebhookTemplateDeleteType) EnumValues() []string {
	return []string{
		string(WebhookTemplateDeleteTypeTemplateDelete),
	}
}

// Validate validates the value of WebhookTemplateDeleteType.
func (v WebhookTemplateDeleteType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookTemplateDeleteType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookTemplateDeleteType.
func (v *WebhookTemplateDeleteType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookTemplateDeleteType(s)
	return nil
}

// Defines values for WebhookTemplateUpdateType.
const (
	WebhookTemplateUpdateTypeTemplateUpdate WebhookTemplateUpdateType = "template_update"
)

// EnumValues returns all valid values for WebhookTemplateUpdateType.
func (WebhookTemplateUpdateType) EnumValues() []string {
	return []string{
		string(WebhookTemplateUpdateTypeTemplateUpdate),
	}
}

// Validate validates the value of WebhookTemplateUpdateType.
func (v WebhookTemplateUpdateType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookTemplateUpdateType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookTemplateUpdateType.
func (v *WebhookTemplateUpdateType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookTemplateUpdateType(s)
	return nil
}

// Defines values for WebhookType.
const (
	WebhookTypeMessageDeleted WebhookType = "message_deleted"
	WebhookTypeMessageRead    WebhookType = "message_read"
	WebhookTypeMessageSent    WebhookType = "message_sent"
	WebhookTypeMessageUpdated WebhookType = "message_updated"
	WebhookTypeReactionAdd    WebhookType = "reaction_add"
	WebhookTypeReactionDelete WebhookType = "reaction_delete"
	WebhookTypeTemplateCreate WebhookType = "template_create"
	WebhookTypeTemplateDelete WebhookType = "template_delete"
	WebhookTypeTemplateUpdate WebhookType = "template_update"
)

// EnumValues returns all valid values for WebhookType.
func (WebhookType) EnumValues() []string {
	return []string{
		string(WebhookTypeMessageDeleted),
		string(WebhookTypeMessageRead),
		string(WebhookTypeMessageSent),
		string(WebhookTypeMessageUpdated),
		string(WebhookTypeReactionAdd),
		string(WebhookTypeReactionDelete),
		string(WebhookTypeTemplateCreate),
		string(WebhookTypeTemplateDelete),
		string(WebhookTypeTemplateUpdate),
	}
}

// Validate validates the value of WebhookType.
func (v WebhookType) ValidateEnum() error {
	for _, value := range v.EnumValues() {
		if string(v) == value {
			return nil
		}
	}
	return fmt.Errorf("invalid value for WebhookType: %v", v)
}

// UnmarshalJSON implements the json.Unmarshaler interface for WebhookType.
func (v *WebhookType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return &json.UnmarshalTypeError{Value: err.Error()}
	}

	*v = WebhookType(s)
	return nil
}

// BaseWebhookRequestData Base structure for webhook request data
type BaseWebhookRequestData struct {
	// Meta Metadata for webhook request
	Meta WebhookRequestMeta `json:"meta"`

	// Type Type of webhook event
	Type WebhookType `json:"type"`
}

// WebhookBotData Represents bot data in the webhook
type WebhookBotData struct {
	// Avatar URL of the bot's avatar
	Avatar string `json:"avatar"`

	// ID Bot identifier
	ID int64 `json:"id"`

	// Name Bot name
	Name string `json:"name"`
}

// WebhookCustomerData Represents customer data in the webhook
type WebhookCustomerData struct {
	// Avatar URL of the customer's avatar
	Avatar string `json:"avatar"`

	// FirstName Customer's first name
	FirstName string `json:"first_name"`

	// LastName Customer's last name
	LastName string `json:"last_name"`
}

// WebhookEmptyResponse Empty response for webhook events that do not require a response
type WebhookEmptyResponse = interface{}

// WebhookMessageDeleted defines model for WebhookMessageDeleted.
type WebhookMessageDeleted struct {
	// Data Webhook event for a message being deleted
	Data WebhookMessageDeletedData `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta        `json:"meta"`
	Type WebhookMessageDeletedType `json:"type"`
}

// WebhookMessageDeletedType defines model for WebhookMessageDeleted.Type.
type WebhookMessageDeletedType string

// WebhookMessageDeletedData defines model for WebhookMessageDeletedData.
type WebhookMessageDeletedData struct {
	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// ExternalChatID External identifier of the chat
	ExternalChatID string `json:"external_chat_id"`

	// ExternalMessageID External identifier of the message
	ExternalMessageID string `json:"external_message_id"`

	// ExternalUserID External identifier of the user
	ExternalUserID string `json:"external_user_id"`
}

// WebhookMessageFile Attached message file
type WebhookMessageFile struct {
	// Caption Text description of the media attachment
	Caption string `json:"caption,omitempty"`

	// Height Image height in pixels (for image type messages only)
	Height int `json:"height,omitempty"`

	// ID UUID of the attached file
	ID openapi_types.UUID `json:"id,omitempty"`

	// Size Attachment size (in bytes)
	Size int `json:"size,omitempty"`

	// Width Image width in pixels (for image type messages only)
	Width int `json:"width,omitempty"`
}

// WebhookMessageMeta Metadata for webhook events
type WebhookMessageMeta struct {
	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// ExternalChatID External identifier of the chat
	ExternalChatID string `json:"external_chat_id"`

	// ExternalUserID External identifier of the user
	ExternalUserID string `json:"external_user_id"`
}

// WebhookMessageReactionAdd defines model for WebhookMessageReactionAdd.
type WebhookMessageReactionAdd struct {
	// Data Webhook event data for a reaction being added to a message
	Data WebhookMessageReactionAddData `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta            `json:"meta"`
	Type WebhookMessageReactionAddType `json:"type"`
}

// WebhookMessageReactionAddType defines model for WebhookMessageReactionAdd.Type.
type WebhookMessageReactionAddType string

// WebhookMessageReactionAddData defines model for WebhookMessageReactionAddData.
type WebhookMessageReactionAddData struct {
	// AllReactions List of all reactions on the message
	AllReactions []WebhookReactionItem `json:"all_reactions"`

	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// ExternalChatID External identifier of the chat
	ExternalChatID string `json:"external_chat_id"`

	// ExternalMessageID External identifier of the message
	ExternalMessageID string `json:"external_message_id"`

	// ExternalUserID External identifier of the user
	ExternalUserID string `json:"external_user_id"`

	// NewReaction New reaction added to the message
	NewReaction string `json:"new_reaction"`

	// OldReaction Old reaction removed from the message
	OldReaction *string `json:"old_reaction,omitempty"`
}

// WebhookMessageReactionData defines model for WebhookMessageReactionData.
type WebhookMessageReactionData struct {
	// AllReactions List of all reactions on the message
	AllReactions []WebhookReactionItem `json:"all_reactions"`

	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// ExternalChatID External identifier of the chat
	ExternalChatID string `json:"external_chat_id"`

	// ExternalMessageID External identifier of the message
	ExternalMessageID string `json:"external_message_id"`

	// ExternalUserID External identifier of the user
	ExternalUserID string `json:"external_user_id"`

	// NewReaction New reaction added to the message
	NewReaction *string `json:"new_reaction,omitempty"`

	// OldReaction Old reaction removed from the message
	OldReaction *string `json:"old_reaction,omitempty"`
}

// WebhookMessageReactionDelete defines model for WebhookMessageReactionDelete.
type WebhookMessageReactionDelete struct {
	// Data Webhook event data for a reaction being deleted from a message
	Data WebhookMessageReactionDeleteData `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta               `json:"meta"`
	Type WebhookMessageReactionDeleteType `json:"type"`
}

// WebhookMessageReactionDeleteType defines model for WebhookMessageReactionDelete.Type.
type WebhookMessageReactionDeleteType string

// WebhookMessageReactionDeleteData defines model for WebhookMessageReactionDeleteData.
type WebhookMessageReactionDeleteData struct {
	// AllReactions List of all reactions on the message
	AllReactions []WebhookReactionItem `json:"all_reactions"`

	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// ExternalChatID External identifier of the chat
	ExternalChatID string `json:"external_chat_id"`

	// ExternalMessageID External identifier of the message
	ExternalMessageID string `json:"external_message_id"`

	// ExternalUserID External identifier of the user
	ExternalUserID string `json:"external_user_id"`

	// NewReaction New reaction added to the message
	NewReaction *string `json:"new_reaction,omitempty"`

	// OldReaction Old reaction removed from the message
	OldReaction *string `json:"old_reaction,omitempty"`
}

// WebhookMessageRead defines model for WebhookMessageRead.
type WebhookMessageRead struct {
	// Data Webhook event for a message being read
	Data WebhookMessageReadData `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta     `json:"meta"`
	Type WebhookMessageReadType `json:"type"`
}

// WebhookMessageReadType defines model for WebhookMessageRead.Type.
type WebhookMessageReadType string

// WebhookMessageReadData defines model for WebhookMessageReadData.
type WebhookMessageReadData struct {
	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// ExternalChatID External identifier of the chat
	ExternalChatID string `json:"external_chat_id"`

	// ExternalMessageID External identifier of the message
	ExternalMessageID string `json:"external_message_id"`

	// ExternalUserID External identifier of the user
	ExternalUserID string `json:"external_user_id"`
}

// WebhookMessageSendingError Represents an error that occurred while sending a message
type WebhookMessageSendingError struct {
	// Code Message error code
	Code MessageErrorCode `json:"code"`

	// ExternalCode External error code, if available
	ExternalCode *string `json:"external_code,omitempty"`

	// Message Error message
	Message string `json:"message" mod:"trim,escape"`
}

// WebhookMessageSent defines model for WebhookMessageSent.
type WebhookMessageSent struct {
	// Data Webhook event data for a message being sent
	Data WebhookMessageSentData `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta     `json:"meta"`
	Type WebhookMessageSentType `json:"type"`
}

// WebhookMessageSentType defines model for WebhookMessageSent.Type.
type WebhookMessageSentType string

// WebhookMessageSentData defines model for WebhookMessageSentData.
type WebhookMessageSentData struct {
	// Attachments Transport attachments
	Attachments *MessageTransportAttachments `json:"attachments,omitempty"`

	// Bot Represents bot data in the webhook
	Bot *WebhookBotData `json:"bot,omitempty"`

	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// Content Message content
	Content *string `json:"content"`

	// Customer Represents customer data in the webhook
	Customer *WebhookCustomerData `json:"customer,omitempty"`

	// ExternalChatID External identifier of the chat
	ExternalChatID string `json:"external_chat_id"`

	// ExternalUserID External identifier of the user
	ExternalUserID string `json:"external_user_id"`

	// ID Unique identifier of the message in MessageGateway
	ID int64 `json:"id"`

	// InAppID System identifier for the message
	InAppID *int32 `json:"in_app_id,omitempty"`

	// Items List of media attachments in the message
	Items []WebhookMessageFile `json:"items,omitempty"`

	// Order Represents the details of an order within a message
	Order *MessageOrder `json:"order,omitempty"`

	// Product Describes a product mentioned in a message
	Product *MessageProduct `json:"product,omitempty"`

	// QuoteContent Content of the quoted message
	QuoteContent *string `json:"quote_content"`

	// QuoteExternalID External identifier of the quoted message
	QuoteExternalID *string `json:"quote_external_id"`

	// Template Represents a chat template information
	Template *WebhookTemplateInfo `json:"template,omitempty"`

	// Type Message type
	Type MessageType `json:"type"`

	// User Represents user data in the webhook
	User *WebhookUserData `json:"user,omitempty"`
}

// WebhookMessageUpdated defines model for WebhookMessageUpdated.
type WebhookMessageUpdated struct {
	// Data Webhook event data for a message being updated
	Data WebhookMessageUpdatedData `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta        `json:"meta"`
	Type WebhookMessageUpdatedType `json:"type"`
}

// WebhookMessageUpdatedType defines model for WebhookMessageUpdated.Type.
type WebhookMessageUpdatedType string

// WebhookMessageUpdatedData defines model for WebhookMessageUpdatedData.
type WebhookMessageUpdatedData struct {
	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// Content Message content
	Content string `json:"content"`

	// ExternalChatID External identifier of the chat
	ExternalChatID string `json:"external_chat_id"`

	// ExternalMessageID External identifier of the message
	ExternalMessageID string `json:"external_message_id"`

	// ExternalUserID External identifier of the user
	ExternalUserID string `json:"external_user_id"`

	// Order Represents the details of an order within a message
	Order *MessageOrder `json:"order,omitempty"`

	// Product Describes a product mentioned in a message
	Product *MessageProduct `json:"product,omitempty"`

	// Type Message type
	Type MessageType `json:"type"`
}

// WebhookReactionItem Represents a reaction item in the webhook
type WebhookReactionItem struct {
	Reaction string `json:"reaction,omitempty"`
}

// WebhookRequestData Common structure for webhook request data
type WebhookRequestData struct {
	Data map[string]interface{} `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta `json:"meta"`

	// Type Type of webhook event
	Type  WebhookType `json:"type"`
	union json.RawMessage
}

// WebhookRequestMeta Metadata for webhook request
type WebhookRequestMeta struct {
	Timestamp int64 `json:"timestamp"`
}

// WebhookSendMessageResponseData Response data for sending a message via webhook
type WebhookSendMessageResponseData struct {
	// Async Indicates if the message was sent asynchronously
	Async bool `json:"async"`

	// Error Represents an error that occurred while sending a message
	Error *WebhookMessageSendingError `json:"error,omitempty"`

	// ExternalChatID External identifier of the chat
	ExternalChatID *string `json:"external_chat_id,omitempty"`

	// ExternalCustomerID External identifier of the customer
	ExternalCustomerID *string `json:"external_customer_id,omitempty"`

	// ExternalMessageID External identifier of the message
	ExternalMessageID *string `json:"external_message_id,omitempty"`
}

// WebhookTemplateArguments Represents the arguments for a template
type WebhookTemplateArguments struct {
	Body WebhookTemplateBodyArguments `json:"body,omitempty"`

	// Buttons Template button arguments
	Buttons []WebhookTemplateButtonArguments `json:"buttons,omitempty"`

	// Header Represents the arguments for the header section of a template
	Header *WebhookTemplateHeaderArguments `json:"header,omitempty"`
}

// WebhookTemplateBodyArguments Represents the arguments for the body section of a template
type WebhookTemplateBodyArguments struct {
	// Args Arguments for the body
	Args []string `json:"args"`
}

// WebhookTemplateButtonArguments Represents the arguments for a template button
type WebhookTemplateButtonArguments struct {
	// Args Arguments for the button
	Args []string `json:"args,omitempty"`

	// Title Title of the button
	Title string `json:"title"`

	// Type Button type
	Type TemplateButtonType `json:"type"`
}

// WebhookTemplateContent Represents the content of a chat template
type WebhookTemplateContent struct {
	// Body Body content of the template
	Body string `json:"body"`

	// Buttons List of template buttons
	Buttons *TemplateButtons `json:"buttons,omitempty"`

	// Category Category of the template
	Category string `json:"category"`

	// Example Template example
	Example *TemplateExample `json:"example,omitempty"`

	// Footer Footer content of the template
	Footer string `json:"footer,omitempty"`

	// Header Header section of the template
	Header *TemplateHeader `json:"header,omitempty"`

	// Lang Language code for the template
	Lang string `json:"lang"`

	// Name Template name
	Name string `json:"name"`
}

// WebhookTemplateCreate defines model for WebhookTemplateCreate.
type WebhookTemplateCreate struct {
	// Data Webhook event data for a template being created
	Data WebhookTemplateCreateData `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta        `json:"meta"`
	Type WebhookTemplateCreateType `json:"type"`
}

// WebhookTemplateCreateType defines model for WebhookTemplateCreate.Type.
type WebhookTemplateCreateType string

// WebhookTemplateCreateData defines model for WebhookTemplateCreateData.
type WebhookTemplateCreateData struct {
	// Body Body content of the template
	Body string `json:"body"`

	// Buttons List of template buttons
	Buttons *TemplateButtons `json:"buttons,omitempty"`

	// Category Category of the template
	Category string `json:"category"`

	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// Example Template example
	Example *TemplateExample `json:"example,omitempty"`

	// Footer Footer content of the template
	Footer string `json:"footer,omitempty"`

	// Header Header section of the template
	Header *TemplateHeader `json:"header,omitempty"`

	// Lang Language code for the template
	Lang string `json:"lang"`

	// Name Template name
	Name string `json:"name"`
}

// WebhookTemplateCreateResponseData Response data for creating a template via webhook
type WebhookTemplateCreateResponseData struct {
	// Code Template code
	Code string `binding:"required" json:"code"`
}

// WebhookTemplateDelete defines model for WebhookTemplateDelete.
type WebhookTemplateDelete struct {
	// Data Webhook event data for a template being deleted
	Data WebhookTemplateDeleteData `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta        `json:"meta"`
	Type WebhookTemplateDeleteType `json:"type"`
}

// WebhookTemplateDeleteType defines model for WebhookTemplateDelete.Type.
type WebhookTemplateDeleteType string

// WebhookTemplateDeleteData defines model for WebhookTemplateDeleteData.
type WebhookTemplateDeleteData struct {
	// Body Body content of the template
	Body string `json:"body"`

	// Buttons List of template buttons
	Buttons *TemplateButtons `json:"buttons,omitempty"`

	// Category Category of the template
	Category string `json:"category"`

	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// Code Template code
	Code string `json:"code"`

	// Example Template example
	Example *TemplateExample `json:"example,omitempty"`

	// Footer Footer content of the template
	Footer string `json:"footer,omitempty"`

	// Header Header section of the template
	Header *TemplateHeader `json:"header,omitempty"`

	// Lang Language code for the template
	Lang string `json:"lang"`

	// Name Template name
	Name string `json:"name"`
}

// WebhookTemplateHeaderArguments Represents the arguments for the header section of a template
type WebhookTemplateHeaderArguments struct {
	// Args Arguments for the header
	Args []string `json:"args,omitempty"`

	// Attachments Attachments for the header
	Attachments []TemplateExampleAttachment `json:"attachments,omitempty"`

	// Type Type of header content
	Type TemplateHeaderContentType `json:"type"`
}

// WebhookTemplateInfo Represents a chat template information
type WebhookTemplateInfo struct {
	// Args Template arguments
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	Args []string `json:"args,omitempty"`

	// Code Template code
	Code      string                   `json:"code,omitempty"`
	Variables WebhookTemplateArguments `json:"variables,omitempty"`
}

// WebhookTemplateUpdate defines model for WebhookTemplateUpdate.
type WebhookTemplateUpdate struct {
	// Data Webhook event data for a template being updated
	Data WebhookTemplateUpdateData `json:"data"`

	// Meta Metadata for webhook request
	Meta WebhookRequestMeta        `json:"meta"`
	Type WebhookTemplateUpdateType `json:"type"`
}

// WebhookTemplateUpdateType defines model for WebhookTemplateUpdate.Type.
type WebhookTemplateUpdateType string

// WebhookTemplateUpdateData defines model for WebhookTemplateUpdateData.
type WebhookTemplateUpdateData struct {
	// Body Body content of the template
	Body string `json:"body"`

	// Buttons List of template buttons
	Buttons *TemplateButtons `json:"buttons,omitempty"`

	// Category Category of the template
	Category string `json:"category"`

	// ChannelID Channel identifier
	ChannelID int64 `json:"channel_id"`

	// Code Template code
	Code string `json:"code"`

	// Example Template example
	Example *TemplateExample `json:"example,omitempty"`

	// Footer Footer content of the template
	Footer string `json:"footer,omitempty"`

	// Header Header section of the template
	Header *TemplateHeader `json:"header,omitempty"`

	// Lang Language code for the template
	Lang string `json:"lang"`

	// Name Template name
	Name string `json:"name"`
}

// WebhookType Type of webhook event
type WebhookType string

// WebhookUserData Represents user data in the webhook
type WebhookUserData struct {
	// Avatar URL of the user's avatar
	Avatar string `json:"avatar"`

	// FirstName User's first name
	FirstName string `json:"first_name"`

	// ID User identifier
	ID int64 `json:"id"`

	// LastName User's last name
	LastName string `json:"last_name"`
}

// WebhookResponse defines model for WebhookResponse.
type WebhookResponse struct {
	union json.RawMessage
}

// WebhookRequest Common structure for webhook request data
type WebhookRequest = WebhookRequestData

// AsWebhookMessageSent returns the union data inside the WebhookRequestData as a WebhookMessageSent
func (t WebhookRequestData) AsWebhookMessageSent() (WebhookMessageSent, error) {
	var body WebhookMessageSent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookMessageSent overwrites any union data inside the WebhookRequestData as the provided WebhookMessageSent
func (t *WebhookRequestData) FromWebhookMessageSent(v WebhookMessageSent) error {
	t.Type = "message_sent"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookMessageSent performs a merge with any union data inside the WebhookRequestData, using the provided WebhookMessageSent
func (t *WebhookRequestData) MergeWebhookMessageSent(v WebhookMessageSent) error {
	t.Type = "message_sent"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookMessageUpdated returns the union data inside the WebhookRequestData as a WebhookMessageUpdated
func (t WebhookRequestData) AsWebhookMessageUpdated() (WebhookMessageUpdated, error) {
	var body WebhookMessageUpdated
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookMessageUpdated overwrites any union data inside the WebhookRequestData as the provided WebhookMessageUpdated
func (t *WebhookRequestData) FromWebhookMessageUpdated(v WebhookMessageUpdated) error {
	t.Type = "message_updated"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookMessageUpdated performs a merge with any union data inside the WebhookRequestData, using the provided WebhookMessageUpdated
func (t *WebhookRequestData) MergeWebhookMessageUpdated(v WebhookMessageUpdated) error {
	t.Type = "message_updated"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookMessageDeleted returns the union data inside the WebhookRequestData as a WebhookMessageDeleted
func (t WebhookRequestData) AsWebhookMessageDeleted() (WebhookMessageDeleted, error) {
	var body WebhookMessageDeleted
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookMessageDeleted overwrites any union data inside the WebhookRequestData as the provided WebhookMessageDeleted
func (t *WebhookRequestData) FromWebhookMessageDeleted(v WebhookMessageDeleted) error {
	t.Type = "message_deleted"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookMessageDeleted performs a merge with any union data inside the WebhookRequestData, using the provided WebhookMessageDeleted
func (t *WebhookRequestData) MergeWebhookMessageDeleted(v WebhookMessageDeleted) error {
	t.Type = "message_deleted"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookMessageRead returns the union data inside the WebhookRequestData as a WebhookMessageRead
func (t WebhookRequestData) AsWebhookMessageRead() (WebhookMessageRead, error) {
	var body WebhookMessageRead
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookMessageRead overwrites any union data inside the WebhookRequestData as the provided WebhookMessageRead
func (t *WebhookRequestData) FromWebhookMessageRead(v WebhookMessageRead) error {
	t.Type = "message_read"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookMessageRead performs a merge with any union data inside the WebhookRequestData, using the provided WebhookMessageRead
func (t *WebhookRequestData) MergeWebhookMessageRead(v WebhookMessageRead) error {
	t.Type = "message_read"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookTemplateCreate returns the union data inside the WebhookRequestData as a WebhookTemplateCreate
func (t WebhookRequestData) AsWebhookTemplateCreate() (WebhookTemplateCreate, error) {
	var body WebhookTemplateCreate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookTemplateCreate overwrites any union data inside the WebhookRequestData as the provided WebhookTemplateCreate
func (t *WebhookRequestData) FromWebhookTemplateCreate(v WebhookTemplateCreate) error {
	t.Type = "template_create"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookTemplateCreate performs a merge with any union data inside the WebhookRequestData, using the provided WebhookTemplateCreate
func (t *WebhookRequestData) MergeWebhookTemplateCreate(v WebhookTemplateCreate) error {
	t.Type = "template_create"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookTemplateUpdate returns the union data inside the WebhookRequestData as a WebhookTemplateUpdate
func (t WebhookRequestData) AsWebhookTemplateUpdate() (WebhookTemplateUpdate, error) {
	var body WebhookTemplateUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookTemplateUpdate overwrites any union data inside the WebhookRequestData as the provided WebhookTemplateUpdate
func (t *WebhookRequestData) FromWebhookTemplateUpdate(v WebhookTemplateUpdate) error {
	t.Type = "template_update"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookTemplateUpdate performs a merge with any union data inside the WebhookRequestData, using the provided WebhookTemplateUpdate
func (t *WebhookRequestData) MergeWebhookTemplateUpdate(v WebhookTemplateUpdate) error {
	t.Type = "template_update"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookTemplateDelete returns the union data inside the WebhookRequestData as a WebhookTemplateDelete
func (t WebhookRequestData) AsWebhookTemplateDelete() (WebhookTemplateDelete, error) {
	var body WebhookTemplateDelete
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookTemplateDelete overwrites any union data inside the WebhookRequestData as the provided WebhookTemplateDelete
func (t *WebhookRequestData) FromWebhookTemplateDelete(v WebhookTemplateDelete) error {
	t.Type = "template_delete"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookTemplateDelete performs a merge with any union data inside the WebhookRequestData, using the provided WebhookTemplateDelete
func (t *WebhookRequestData) MergeWebhookTemplateDelete(v WebhookTemplateDelete) error {
	t.Type = "template_delete"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookMessageReactionAdd returns the union data inside the WebhookRequestData as a WebhookMessageReactionAdd
func (t WebhookRequestData) AsWebhookMessageReactionAdd() (WebhookMessageReactionAdd, error) {
	var body WebhookMessageReactionAdd
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookMessageReactionAdd overwrites any union data inside the WebhookRequestData as the provided WebhookMessageReactionAdd
func (t *WebhookRequestData) FromWebhookMessageReactionAdd(v WebhookMessageReactionAdd) error {
	t.Type = "reaction_add"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookMessageReactionAdd performs a merge with any union data inside the WebhookRequestData, using the provided WebhookMessageReactionAdd
func (t *WebhookRequestData) MergeWebhookMessageReactionAdd(v WebhookMessageReactionAdd) error {
	t.Type = "reaction_add"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookMessageReactionDelete returns the union data inside the WebhookRequestData as a WebhookMessageReactionDelete
func (t WebhookRequestData) AsWebhookMessageReactionDelete() (WebhookMessageReactionDelete, error) {
	var body WebhookMessageReactionDelete
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookMessageReactionDelete overwrites any union data inside the WebhookRequestData as the provided WebhookMessageReactionDelete
func (t *WebhookRequestData) FromWebhookMessageReactionDelete(v WebhookMessageReactionDelete) error {
	t.Type = "reaction_delete"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookMessageReactionDelete performs a merge with any union data inside the WebhookRequestData, using the provided WebhookMessageReactionDelete
func (t *WebhookRequestData) MergeWebhookMessageReactionDelete(v WebhookMessageReactionDelete) error {
	t.Type = "reaction_delete"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WebhookRequestData) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WebhookRequestData) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "message_deleted":
		return t.AsWebhookMessageDeleted()
	case "message_read":
		return t.AsWebhookMessageRead()
	case "message_sent":
		return t.AsWebhookMessageSent()
	case "message_updated":
		return t.AsWebhookMessageUpdated()
	case "reaction_add":
		return t.AsWebhookMessageReactionAdd()
	case "reaction_delete":
		return t.AsWebhookMessageReactionDelete()
	case "template_create":
		return t.AsWebhookTemplateCreate()
	case "template_delete":
		return t.AsWebhookTemplateDelete()
	case "template_update":
		return t.AsWebhookTemplateUpdate()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WebhookRequestData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["data"], err = json.Marshal(t.Data)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'data': %w", err)
	}

	object["meta"], err = json.Marshal(t.Meta)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'meta': %w", err)
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *WebhookRequestData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["data"]; found {
		err = json.Unmarshal(raw, &t.Data)
		if err != nil {
			return fmt.Errorf("error reading 'data': %w", err)
		}
	}

	if raw, found := object["meta"]; found {
		err = json.Unmarshal(raw, &t.Meta)
		if err != nil {
			return fmt.Errorf("error reading 'meta': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsWebhookEmptyResponse returns the union data inside the WebhookResponse as a WebhookEmptyResponse
func (t WebhookResponse) AsWebhookEmptyResponse() (WebhookEmptyResponse, error) {
	var body WebhookEmptyResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookEmptyResponse overwrites any union data inside the WebhookResponse as the provided WebhookEmptyResponse
func (t *WebhookResponse) FromWebhookEmptyResponse(v WebhookEmptyResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookEmptyResponse performs a merge with any union data inside the WebhookResponse, using the provided WebhookEmptyResponse
func (t *WebhookResponse) MergeWebhookEmptyResponse(v WebhookEmptyResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookSendMessageResponseData returns the union data inside the WebhookResponse as a WebhookSendMessageResponseData
func (t WebhookResponse) AsWebhookSendMessageResponseData() (WebhookSendMessageResponseData, error) {
	var body WebhookSendMessageResponseData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookSendMessageResponseData overwrites any union data inside the WebhookResponse as the provided WebhookSendMessageResponseData
func (t *WebhookResponse) FromWebhookSendMessageResponseData(v WebhookSendMessageResponseData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookSendMessageResponseData performs a merge with any union data inside the WebhookResponse, using the provided WebhookSendMessageResponseData
func (t *WebhookResponse) MergeWebhookSendMessageResponseData(v WebhookSendMessageResponseData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookTemplateCreateResponseData returns the union data inside the WebhookResponse as a WebhookTemplateCreateResponseData
func (t WebhookResponse) AsWebhookTemplateCreateResponseData() (WebhookTemplateCreateResponseData, error) {
	var body WebhookTemplateCreateResponseData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookTemplateCreateResponseData overwrites any union data inside the WebhookResponse as the provided WebhookTemplateCreateResponseData
func (t *WebhookResponse) FromWebhookTemplateCreateResponseData(v WebhookTemplateCreateResponseData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookTemplateCreateResponseData performs a merge with any union data inside the WebhookResponse, using the provided WebhookTemplateCreateResponseData
func (t *WebhookResponse) MergeWebhookTemplateCreateResponseData(v WebhookTemplateCreateResponseData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WebhookResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WebhookResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
